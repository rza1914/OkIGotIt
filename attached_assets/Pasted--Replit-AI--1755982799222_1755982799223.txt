این «پرامپت سوپر‌دی‌تیلد» رو عیناً بده به Replit AI تا مشکل «کلیک‌ها برمی‌گردن به صفحه اصلی» کامل حل بشه. (قوانین: ❗️به `vite.config.ts` دست نزن. سرور پابلیک فقط همون Uvicorn روی `0.0.0.0:$PORT` بمونه. همهٔ APIها با مسیر نسبی `/api/v1` صدا زده بشن.)

---

# 🧭 Replit AI — Fix SPA Navigation for iShop (React + FastAPI, RTL)

**ثابت‌ها (دست نزن):**

* Backend همین حالا `dist/` رو در روت با `StaticFiles(html=True)` سرو می‌کنه — نگه دار.
* Run باید `npm run dev` باشه و **فقط** Uvicorn روی `$PORT` گوش بده.
* `public/app-config.json` = `{ "API_BASE": "/api/v1" }`.

## 1) Router را استاندارد کن

* `src/main.tsx` را طوری ویرایش کن که **BrowserRouter** ریشهٔ اپ را بپیچد:

```tsx
// src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);
```

* `src/App.tsx` را مسیرمحور کن (Layout + Routes):

```tsx
// src/App.tsx
import { Routes, Route } from "react-router-dom";
import Layout from "./components/Layout";
import Home from "./pages/Home";
import Products from "./pages/Products";
import Blog from "./pages/Blog";
import Dashboard from "./pages/Dashboard";
import NotFound from "./pages/NotFound";

export default function App() {
  return (
    <Routes>
      <Route element={<Layout />}>
        <Route index element={<Home />} />
        <Route path="products" element={<Products />} />
        <Route path="blog" element={<Blog />} />
        <Route path="dashboard" element={<Dashboard />} />
        <Route path="*" element={<NotFound />} />
      </Route>
    </Routes>
  );
}
```

* `src/components/Layout.tsx`:

```tsx
// src/components/Layout.tsx
import { Outlet } from "react-router-dom";
import Header from "./Header";
import Footer from "./Footer";

export default function Layout() {
  return (
    <>
      <Header />
      <main dir="rtl"><Outlet /></main>
      <Footer />
    </>
  );
}
```

## 2) همهٔ لینک‌های داخلی را تبدیل کن به Link/NavLink

* هرجا لینک داخلی داری (`/`, `/products`, `/blog`, `/dashboard`) از `Link/NavLink` استفاده کن. هر `<a href="/">` یا `<a href="#">` داخلی را حذف یا تبدیل کن.
* در فایل‌های `Header.tsx`, `Hero.tsx`, کارت‌ها و … این‌ها را جایگزین کن:

```tsx
// درست:
import { Link, NavLink } from "react-router-dom";
<NavLink to="/" end>خانه</NavLink>
<NavLink to="/products">محصولات</NavLink>
<NavLink to="/blog">وبلاگ</NavLink>
<Link to="/" aria-label="iShop Home"><img src="/logo-iShop.png" alt="iShop"/></Link>

// غلط (حذف/تبدیل):
// <a href="/">...</a>
// <a href="#">...</a>
// <a href="/#products">...</a>
```

## 3) اسکرول به سکشن یک صفحه (بدون تغییر URL)

* اگر به سکشن داخلی هوم می‌روی (مثل products)، به‌جای `href="#products"` از اسکرول نرم استفاده کن:

```tsx
// src/lib/scroll.ts
export function scrollToId(id: string) {
  const el = document.getElementById(id);
  if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
}

// استفاده:
<button type="button" onClick={() => scrollToId("products-section")}>مشاهده محصولات</button>
```

## 4) فرم‌ها صفحه را ریفرش نکنند

* تمام فرم‌ها `onSubmit={(e)=>{ e.preventDefault(); ... }}` داشته باشند.
* تمام دکمه‌هایی که submit نیستند: `type="button"` داشته باشند.
* مثال در Auth/Search:

```tsx
<form onSubmit={(e)=>{ e.preventDefault(); doLogin(); }}>
  ...
  <button type="submit">ورود</button>
</form>

<button type="button" onClick={openCart}>🛒 سبد خرید</button>
```

## 5) هر اسکریپت/هندلر قدیمی که ناوبری را خراب می‌کند حذف کن

* جستجو کن و هرچه `onclick=` این‌لاین، `showPage(`، `location.` یا `href="#"` هست اصلاح/حذف کن:

```bash
grep -R "onclick=" -n src public
grep -R "showPage(" -n .
grep -R 'href="#"' -n src public
grep -R "location\\." -n src
```

**اقدام برای هر مورد:**

* لینک داخلی → `Link/NavLink`
* اکشن بدون ناوبری → `<button type="button" ...>`
* فانکشن‌های SPA قدیمی (مثل `showPage`) را حذف کن و منطقش را به Router/اسکرول منتقل کن.

## 6) جلوگیری از کش index.html (حل 404 چانک قدیمی)

* `public/index.html` را باز کن و این متاها را اضافه کن تا `index.html` کش نشود:

```html
<meta http-equiv="Cache-Control" content="no-store, must-revalidate" />
<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="0" />
```

* یک‌بار بیلد تازه بگیر و ریفرش سخت کن:

```bash
rm -rf dist
npm run build
```

## 7) ابزار دیباگ مسیر (موقتی)

* برای اطمینان از تغییر مسیر کلاینت‌ساید، این را به `Layout` اضافه کن و بعد از تست حذفش کن:

```tsx
// زیر import ها:
import { useLocation } from "react-router-dom";

function PathDebug() {
  const { pathname } = useLocation();
  return (
    <div style={{position:'fixed',left:8,bottom:8,background:'#000a',color:'#fff',padding:'4px 8px',borderRadius:8,fontSize:12,zIndex:9999}}>
      {pathname}
    </div>
  );
}

// در Layout:
<>
  <Header />
  <PathDebug />
  <main dir="rtl"><Outlet /></main>
  <Footer />
</>
```

## 8) پذیرش (Acceptance)

* کلیک «محصولات» → URL می‌شود `/products` و محتوای Products رندر می‌شود (بدون ریفرش کامل).
* کلیک «وبلاگ» → `/blog` رندر.
* CTA هیرو «مشاهده محصولات» دیگر به `/` برنمی‌گرداند.
* دکمه‌های سبد/ورود (مودال‌ها) هیچ‌وقت صفحه را رفرش نمی‌کنند.
* رفرش مستقیم روی `/products` یا `/blog` به‌خاطر `StaticFiles(html=True)` درست لود می‌شود.
* در DevTools → Network هیچ کلیکی باعث `GET /` ناگهانی نمی‌شود.

## 9) اجرا

* Run = `npm run dev` (بدون دست‌کاری `vite.config.ts`).
* اگر کش مرورگر مشکل ایجاد کرد، Hard Refresh بزن.

---

**هدف:** همهٔ ناوبری‌ها ۱۰۰٪ کلاینت‌ساید توسط React Router انجام شوند؛ هیچ `<a href="/">` یا `href="#"` باقی نماند؛ فرم‌ها preventDefault داشته باشند؛ و هیچ اسکریپت قدیمی (vanilla) مسیر را تغییر ندهد.
