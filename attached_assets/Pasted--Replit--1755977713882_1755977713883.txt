حله—این «پرومپت سوپر‌دی‌تیلد Replit» دقیقاً همون رفتاریه که می‌خوای: بعد از ورود، دکمه‌ی هدر تبدیل می‌شه به منوی کاربر با گزینه‌های **«داشبورد من»** و **«خروج»**. (تأکید: **به هیچ‌وجه `vite.config.ts` را ویرایش نکن**.)

---

# 🔧 Replit AI — iShop: Auth Modal + User Menu + Customer Dashboard

**Constraints (Do NOT change):**

* **Do NOT edit `vite.config.ts`.** Assume it’s correct.
* RTL + فارسی، تم روشن مینیمال (سفید، خطوط طوسی روشن، اَکنت رزگلد/طلایی).
* فرانت از `public/app-config.json` مقدار `API_BASE` را می‌خواند.

## 1) هدف

1. پاپ‌آپ احراز هویت شیشه‌ای دو‌تب (ورود/ثبت‌نام) — قبلاً ساختیم.
2. **بعد از ورود**، دکمه‌ی هدر تبدیل شود به **منوی کاربر** با گزینه‌های:

   * «داشبورد من» → هدایت به `/dashboard` (داشبورد مشتری)
   * «خروج»
3. صفحه‌ی **Customer Dashboard** با حداقل این بخش‌ها:

   * خوش‌آمدگویی با نام کاربر
   * کارت «سفارش‌های من» (لیست یا پیام «هنوز سفارشی ندارید»)
   * کارت «اطلاعات حساب» (ایمیل/موبایل)
   * دکمه‌ی «خروج» (ثانویه)

## 2) ساختار فایل‌ها (Front)

ایجاد/به‌روزرسانی:

```
src/
  contexts/
    AuthContext.tsx        # user, token, openAuthModal, login, register, logout
  components/
    Header.tsx             # دکمه‌ی هدر → قبل از لاگین «ورود»، بعد از لاگین منوی کاربر
    auth/
      AuthModal.tsx        # مودال شیشه‌ای دو تب (Login/Register)
  pages/
    Dashboard.tsx          # صفحه‌ی داشبورد مشتری
  routes/
    RequireAuth.tsx        # نگهبان مسیر (اگر لاگین نبود → ریدایرکت)
  lib/
    runtimeConfig.ts       # خواندن API_BASE از /app-config.json
    api.ts                 # helper برای fetch با API_BASE + Authorization
    date.ts                # تاریخ شمسی/فارسی (اگر لازم شد)
```

## 3) رفتار هدر و منوی کاربر

* اگر **user = null**: دکمه «👤 ورود/ثبت‌نام» → باز کردن `AuthModal`.
* اگر **user != null**: نمایش دکمه‌ی گرد با متن «👤 {first\_name}». کلیک → **منوی شناور (popover)** با دو گزینه:

  * «داشبورد من» → `navigate('/dashboard')`
  * «خروج» → `auth.logout()` سپس `navigate('/')`
* طراحی منو: شیشه‌ای ملایم (`bg-white/70`, `backdrop-blur-xl`, border نازک، سایه‌ی خیلی نرم)، آیتم‌ها خوانا، حالت hover روشن.
* دسترس‌پذیری: بستن با کلیک بیرون/فشار Esc، فوکوس‌تراپ داخل منو.

## 4) لاجیک Auth (Context)

* state: `{ user: User|null, token: string|null, isAuthOpen: boolean, activeTab: 'login'|'register' }`
* روی mount: اگر `localStorage.token` بود → `GET /auth/user` برای هیدریت.
* `login(identifier, password)` → `POST /auth/login` → ذخیره `access_token`، set user، بستن مودال.
* `register(payload)` → `POST /auth/register` → مشابه login.
* `logout()` → پاک‌کردن token/user از state و localStorage.

> همه‌ی درخواست‌های auth با `Authorization: Bearer <token>` و `API_BASE` از `runtimeConfig`.

## 5) مسیر و نگهبان

* استفاده از `react-router-dom`:

  * `/` → Home
  * `/dashboard` → **Protected** با `RequireAuth` (اگر لاگین نبود → ریدایرکت به `/` و `openAuthModal('login')`)
* `RequireAuth.tsx`:

  * اگر `!user` → `navigate('/')` و `openAuthModal('login')`
  * در غیر این صورت `Outlet` را رندر کن.

## 6) صفحه‌ی Dashboard.tsx (UI)

* Container روشن، فاصله‌های سخاوتمندانه (Apple-like).
* بلوک Welcome: «سلام، {first\_name} 👋»
* کارت سفارش‌ها:

  * fetch از `GET /api/v1/orders/my` (اگر هنوز API نداری، موقتاً mock با آرایه خالی و پیام «سفارشی ثبت نشده»)
  * جدول کوچک: شماره سفارش، تاریخ، مجموع، وضعیت.
* کارت اطلاعات حساب: نام، نام‌خانوادگی، ایمیل/موبایل.
* دکمه ثانویه «خروج» (همین‌جا هم logout کند).
* ریسپانسیو کامل.

## 7) API های لازم (Back — اگر نبود بساز)

زیر `/api/v1`:

* `POST /auth/login`  → `{identifier, password}` → `{ access_token, user }`
* `POST /auth/register` → `{ first_name, last_name, email_or_phone, password }` → `{ access_token, user }`
* `GET /auth/user` (JWT) → `{ id, first_name, last_name, email }`
* **Orders (اختیاری اولیه):**

  * `GET /orders/my` (JWT) → `[{ id, created_at, total:int, status:'paid'|'pending'|'canceled' }]` یا `[]`

> در حالت Dev CORS باز باشد. Prod محدود به دامنه خودت. تغییری در `vite.config.ts` نده.

## 8) استایل و جزئیات بصری

* تم روشن، خطوط مرزی #E5E7EB، متن #111 / توضیح #6B7280.
* اَکنت رزگلد/طلایی فقط روی CTAها (گرادیانت طلایی→رزگلد).
* مودال شیشه‌ای: `bg-white/60`, `backdrop-blur-xl`, `border border-black/10`, `rounded-2xl`, `shadow-2xl`.
* منوی کاربر: همان شیشه‌ای ولی جمع‌وجور، آیتم‌ها با padding مناسب.

## 9) پذیرش (Acceptance)

* **قبل از ورود**: هدر «👤 ورود/ثبت‌نام» را نشان می‌دهد؛ کلیک → مودال دو تب باز می‌شود.
* **ورود موفق**: مودال بسته می‌شود؛ دکمه‌ی هدر تبدیل به «👤 {first\_name}» با **منوی کاربر**.
* **کلیک روی «داشبورد من»** → هدایت به `/dashboard`، صفحه‌ی داشبورد رندر می‌شود.
* **کلیک روی «خروج»** (از منو یا از داشبورد) → توکن حذف، کاربر null، ریدایرکت به `/`.
* **رفرش صفحه**: اگر توکن معتبر باشد، کاربر خودکار هیدریت شود و منوی کاربر دیده شود.
* **بدون تغییر در `vite.config.ts`** همه‌چیز کار کند.

## 10) نکته‌های Replit

* `public/app-config.json` در Dev: `{"API_BASE":"http://127.0.0.1:8000/api/v1"}`
* Run = `npm run dev`  (در صورت نیاز از dev-proxy استفاده کن تا مسأله‌ی allowedHosts حل شود)
* فونت Vazirmatn در `index.html` لود و روی body اعمال شود.

---

اگه خواستی، همین الان می‌تونم اسکلت کد `Header.tsx` (منوی کاربر)، `AuthContext.tsx` (متدهای login/logout)، `RequireAuth.tsx` و `pages/Dashboard.tsx` رو هم بدم تا مستقیم بندازی تو پروژه.
