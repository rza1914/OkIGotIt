این خطا یعنی داری از یه آدرسی «JSON» می‌خوای، ولی سرور بهت «HTML (شروع با \<!doctype…)» داده. سه سناریوی رایج:

1. داری `/app-config.json` رو می‌خونی ولی سرور به‌جاش `index.html` داده (فایل واقعاً سرو نمی‌شه).
2. داری به `/api/v1/...` می‌زنی ولی چنین API‌ای نداری، و سرور برای مسیرهای ناشناخته `index.html` برمی‌گردونه.
3. بیلد قدیمی/ناقصه و فایل‌ها داخل `dist/` نیستن.

برای رفع قطعی، این 4 مرحله رو دقیق انجام بده:

---

## 1) FastAPI رو طوری تنظیم کن که کل ریشهٔ `dist/` رو سرو کنه (نه فقط `/assets`)

الان احتمالاً فقط `/assets` رو mount کردی و برای بقیهٔ درخواست‌ها catch-all گذاشتی که `index.html` برگردونه؛ نتیجه‌اش این می‌شه که `/app-config.json` هم بدل به `index.html` می‌شه. این نسخه رو جایگزین کن:

```py
# app/main.py
import os
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# --- API ها اینجاست (نمونه) ---
@app.get("/api/v1/health")
def health():
    return {"ok": True}

# Dev CORS باز؛ در پروداکشن محدود کن
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_methods=["*"], allow_headers=["*"],
)

# 👇 مهم: کل dist را در ریشه سِرو کن تا /app-config.json و بقیه فایل‌ها مستقیم سرو شوند
if os.path.isdir("dist"):
    app.mount("/", StaticFiles(directory="dist", html=True), name="spa")

# ⚠️ نکته مهم: اگر قبلاً چنین چیزی داشتی:
# @app.get("/{full_path:path}") -> index.html
# آن را حذف کن. چون mount بالا خودش index.html را برای مسیرهای SPA هندل می‌کند
# و اجازه می‌دهد فایل‌های واقعی مثل /app-config.json به‌صورت JSON سرو شوند.
```

> ترتیب مهمه: اول مسیرهای `/api/...` رو تعریف کن، بعد `app.mount("/")` رو بذار.

---

## 2) دوباره بیلد بگیر تا `app-config.json` بره داخل `dist/`

`public/app-config.json` فقط با بیلد میره داخل `dist/`. اگر تازه اضافه‌ش کردی ولی بیلد نگرفتی، سرور نمی‌تونه پیداش کنه و به‌جاش `index.html` می‌ده.

```bash
rm -rf dist
npm run build
# حالا این باید true باشه:
ls dist/app-config.json
```

---

## 3) Loader فرانت رو ضدخطا کن (Content-Type را چک کن)

اگر به هر دلیل باز هم به‌جای JSON، HTML بیاد، به‌جای کرش، مقدار پیش‌فرض بده:

```ts
// src/lib/runtimeConfig.ts
export async function loadRuntimeConfig() {
  try {
    const r = await fetch('/app-config.json', { cache: 'no-store' });
    const ct = r.headers.get('content-type') || '';
    if (!r.ok || !ct.includes('application/json')) throw new Error('cfg-not-json');
    return await r.json();
  } catch {
    return { API_BASE: '/api/v1' }; // پیش‌فرض امن
  }
}
```

و حتماً همهٔ فراخوانی‌های API رو از یه هلسپر واحد استفاده کن:

```ts
// src/lib/api.ts
let cfg = { API_BASE: '/api/v1' };
export function setRuntimeCfg(c:{API_BASE:string}) { cfg = c; }

export async function api<T>(path:string, opts: RequestInit = {}) {
  const res = await fetch(`${cfg.API_BASE}${path}`, {
    headers: { 'Content-Type':'application/json', ...(opts.headers||{}) },
    ...opts
  });
  const ct = res.headers.get('content-type') || '';
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  if (!ct.includes('application/json')) throw new Error('Not JSON');
  return res.json() as Promise<T>;
}
```

---

## 4) دقیق تشخیص بده «فچِ خراب» کدومه

در DevTools → Network روی ریکوئستِ Fail کلیک کن:

* اگر URL = **`/app-config.json`** و Status=200 و Response با `<!doctype` شروع می‌شه → مرحله 1 و 2 دقیقاً همین رو حل می‌کنه (mount ریشه + بیلد جدید).
* اگر URL = **`/api/v1/...`** و Response `<!doctype` هست → یعنی اون API رو نداری (یا مسیر اشتباهه). اول تو مرورگر برو به `/api/v1/health`؛ اگر JSON دیدی، ولی `/api/v1/products` 404/HTML می‌ده، پس باید اون اندپوینت رو اضافه کنی یا مسیر فرانت رو اصلاح کنی.

نمونهٔ سادهٔ Products برای تست سریع:

```py
# اضافه کن در app/main.py قبل از mount("/")
@app.get("/api/v1/products")
def products():
    return [
      {"id":1,"name":"کیف رزگلد","price":1250000,"image_url":""},
      {"id":2,"name":"کفش طلایی","price":2390000,"image_url":""}
    ]
```

---

## اگر هنوز Replit «دامنهٔ خالی» می‌دهد

یعنی کسی روی `$PORT` گوش نمی‌دهد. Run باید این باشد:

```json
{
  "scripts": {
    "dev": "uvicorn app.main:app --host 0.0.0.0 --port $PORT",
    "build": "vite build"
  }
}
```

* اول `npm run build`، بعد Run = `npm run dev`.
* وقتی همه‌چیز اوکی شد، می‌تونی برگردی به مدل پایدار «تک‌پورت» با واچ:

  ```json
  "dev": "concurrently -k \"vite build --watch\" \"uvicorn app.main:app --host 0.0.0.0 --port $PORT\""
  ```

---

### جمع‌بندیِ علت ارور

`Unexpected token '<'` یعنی پاسخ JSON نبود و HTML برگشته. با **mount کردن کل ریشهٔ `dist/`** و **بیلد تازه** مشکل `app-config.json` حل می‌شه؛ با **تعریف API واقعی** مشکل `/api/v1/...` حل می‌شه؛ و با **چک کردن content-type در کلاینت** جلوی کرش گرفته می‌شه.
