این «پرامپت سوپر‌دی‌تیلد» رو عیناً بده به Replit AI تا برات **سبد خرید به صورت سایدبار شیشه‌ای از راست (RTL)** و **جعبهٔ جستجو کنار لوگو (سمت راست هدر)** رو بسازه و به پروژهٔ iShop وصل کنه.
(تأکید: ❗️**به هیچ‌وجه `vite.config.ts` را ویرایش نکن**. همه‌چیز با Runtime Config و کد فرانت/بک انجام می‌شود.)

---

# 🔎🛒 Replit AI — iShop: Glass Cart Drawer + Header Search (RTL, Light)

**Constraints (do not change):**

* Do **NOT** edit `vite.config.ts` (assume correct).
* RTL + فارسی، تم **روشنِ مینیمال** (سفید، خطوط طوسی #E5E7EB، اَکنت رزگلد `#b76e79` و طلایی `#d4af37`).
* فرانت API را از `/app-config.json` (کلید `API_BASE`) می‌خوانَد؛ فراخوانی‌ها با مسیرهای نسبی (`/api/v1/...`).

## 0) هدف

1. **سبد خرید** به‌صورت **سایدبار شیشه‌ای (glassmorphism)** که از **راست** باز می‌شود (RTL)، با لیست اقلام، کم/زیاد کردن تعداد، حذف، نمایش جمع جزء/کل، و CTA «ثبت سفارش».
2. **جستجو** کنار **لوگو سمت راست هدر**: یک SearchBar کم‌جا (آیکون یا فیلد باریک) با **پیشنهاد محصول زنده** (debounce)، بازشدن پنل نتایج زیر همان بخش، و هدایت به صفحهٔ محصول.

---

## 1) ساختار فایل‌ها (Front)

ایجاد/به‌روزرسانی فایل‌ها:

```
src/
  contexts/
    CartContext.tsx           # مدیریت سبد (guest + sync اختیاری)، باز/بسته بودن Drawer
  components/
    cart/
      CartDrawer.tsx          # خود سایدبار شیشه‌ای + اقلام + خلاصه + CTA
      CartItem.tsx            # آیتم منفرد (تصویر، عنوان، قیمت، کنترل تعداد)
    search/
      SearchBar.tsx           # اینپوت/آیکون جستجو کنار لوگو + پنل نتایج
      SearchResultsPanel.tsx  # لیست نتایج زنده (عنوان، قیمت، تصویر کوچک)
  components/
    Header.tsx                # لوگو (راست)، جستجو کنار لوگو، ناوبری، منوی کاربر، دکمهٔ سبد
  lib/
    api.ts                    # helper fetch با API_BASE (از قبل)
    runtimeConfig.ts          # loader app-config.json (از قبل)
    fmt.ts                    # formatPrice به فارسی، digitsFa
  hooks/
    useLockBodyScroll.ts      # برای قفل اسکرول هنگام باز بودن Drawer/Modal
```

---

## 2) UI/UX (طراحی و رفتار)

### Cart Drawer (Glass, RTL)

* **باز/بسته:** از راست به چپ (RTL) اسلاید کند؛ overlay تیره‌ی ملایم (`rgba(0,0,0,.35)`).
* **کانتینر:** `bg-white/60 backdrop-blur-xl border border-black/10 rounded-l-2xl shadow-2xl`، عرض: 360–420px (موبایل فول عرض تا 90%).
* **Header سایدبار:** «سبد خرید» + نشان تعداد اقلام، دکمه × برای بستن.
* **بدنه:** لیست اقلام (تصویر 64px/80px، عنوان، قیمت واحد، کنترل تعداد – و حذف).
* **پایین سایدبار (Summary):** جمع جزء، هزینه ارسال (اختیاری/ثابت)، **جمع کل**، دکمهٔ «ثبت سفارش» (Primary با گرادیانت طلایی→رزگلد).
* **اقدام ثبت سفارش:**

  * اگر **لاگین نیست**: Drawer بسته شود → AuthModal باز شود (تب «ورود»).
  * اگر **لاگین هست**: `POST /api/v1/orders` با اقلام؛ موفق → پاکسازی سبد + پیام موفقیت.
* **A11y/تعامل:** focus trap، Esc برای بستن، کلیک بیرون برای بستن، قفل اسکرول پس‌زمینه.

### SearchBar کنار لوگو (سمت راست)

* **چیدمان هدر (RTL):** راست = لوگو، **کنارش** SearchBar کم‌جا؛ وسط = ناوبری؛ چپ = منوی کاربر + دکمه سبد.
* **کامپوننت SearchBar:**

  * حالت بسته: آیکون ذره‌بین + placeholder کوتاه («جستجو…»).
  * حالت فعال: input با **debounce 300ms**؛ فراخوانی `GET /api/v1/products?query=...&limit=6`.
  * پنل نتایج زیر SearchBar: کارت‌های کوچک (تصویر 40–56px، نام، قیمت)، hover روشن، Enter → رفتن به اولین نتیجه، ESC → بستن پنل.
  * شورتکات: `/` یا `Ctrl+K` برای فوکوس روی جستجو.
  * بدون تغییر DOM هدر در موبایل: SearchBar تمام عرض زیر لوگو (responsively).
* **A11y:** aria-controls/expanded برای پنل، لیست نتایج با نقش `listbox`, آیتم‌ها `option`.

### استایل کلّی (Light, Apple-like)

* فونت Vazirmatn، متن #111، توضیح #6B7280، خطوط #E5E7EB.
* Primary Button: گرادیانت `#d4af37 → #b76e79`، متن تیره، سایهٔ لطیف.
* Hoverها بسیار ملایم، موشن 150–200ms.

---

## 3) منطق و State (CartContext)

* **ساختار State:**

  ```ts
  type CartItem = {
    id: number; name: string; price: number; image_url?: string;
    quantity: number; // min 1
  };
  type CartState = {
    isOpen: boolean;
    items: CartItem[];
  };
  ```
* **ذخیره‌سازی:** `localStorage('cart')` برای **Guest Cart** (پایدار).
  اگر لاگین شد، می‌تونی اختیاری `/api/v1/cart/sync` صدا بزنی (اگر API مهیاست)، ولی الزام نیست.
* **اکشن‌ها:**

  * `openCart() / closeCart()`
  * `add(item)` → اگر موجود، quantity++؛ در غیر این صورت push
  * `remove(id)`، `setQty(id, q)` (حداقل 1)
  * `clear()`
  * `subtotal()` محاسبه با قیمت‌ها
* **اتصال به UI:**

  * دکمهٔ «🛒» در هدر → `openCart()`
  * `CartDrawer` همه اکشن‌ها را از Context می‌گیرد.

---

## 4) API های موردنیاز (Back)

* محصولات برای جستجو:

  * `GET /api/v1/products?query=<q>&limit=6` → `[ {id, name, price, image_url} ]`
* سفارش:

  * `POST /api/v1/orders` (JWT) → body:

    ```json
    {
      "items": [
        {"product_id": 1, "quantity": 2, "price": 350000}
      ],
      "total": 700000
    }
    ```
  * 201 → `{id, status: "created", ...}`
* (اختیاری) Sync سبد:

  * `POST /api/v1/cart/sync` (JWT) → ذخیره سمت سرور (نه الزامی)

> همهٔ مسیرها زیر `/api/v1`؛ فرانت فقط با Base نسبی کار می‌کند (از `api.ts`/`API_BASE`).

---

## 5) جزییات پیاده‌سازی

### `src/contexts/CartContext.tsx`

* `createContext` + provider؛ روی mount `localStorage` را بخواند، روی تغییرات ذخیره کند.
* قیمت‌ها با `Intl.NumberFormat('fa-IR')` فرمت شوند؛ ارقام فارسی.

### `src/components/cart/CartDrawer.tsx`

* **ساختار:**

  * Overlay: `fixed inset-0 bg-black/40` (کلیک → closeCart)
  * Panel: `fixed inset-y-0 right-0 w-full max-w-[420px] ... glass styles`
  * Header: عنوان + نشان تعداد + ×
  * List: map روی `items`
  * Footer Summary: subtotal، (shipping اختیاری)، کل، CTA «ثبت سفارش»
* **CTA ثبت سفارش:**

  * اگر `!user`: `closeCart()` → `openAuthModal('login')`
  * else: `POST /orders` با آیتم‌ها و جمع؛ موفق → `clear()` + پیام موفقیت.

### `src/components/cart/CartItem.tsx`

* تصویر کوچک، نام، قیمت واحد
* کنترل تعداد: `-` / عدد / `+` (با محدودکردن حداقل 1)
* دکمه حذف (آیکون سطل)

### `src/components/search/SearchBar.tsx`

* اینپوت با RTL، Placeholder کوتاه.
* حالت فشرده (فقط آیکون) روی موبایل/عرض کم.
* **Debounce 300ms** روی تغییرات؛ اگر `q.length < 2` → پنل بسته.
* `GET /products?query=q&limit=6` (با helper `api`)
* پنل نتایج (`SearchResultsPanel`) با کارت‌های کوچک؛ کلیک → `navigate('/product/:id')` یا فراخوانی handler بیرونی.
* کیبرد: `/` یا `Ctrl+K` → فوکوس؛ `Esc` → بستن پنل؛ ↑↓ انتخاب آیتم‌ها.

### `src/components/Header.tsx`

* راست: لوگو + **SearchBar** چسبیده به آن.
* وسط: لینک‌ها (خانه/محصولات/وبلاگ)
* چپ: **دکمه کاربر** (ورود/ثبت‌نام → AuthModal؛ بعد از ورود → منوی کاربر: «داشبورد من»، «خروج») + **دکمه سبد خرید** (نشان تعداد، `openCart()`)

### `src/lib/fmt.ts`

* `export const formatPrice = (n:number) => new Intl.NumberFormat('fa-IR').format(n) + ' تومان';`
* `export const digitsFa = ...` (در صورت نیاز)

### `src/hooks/useLockBodyScroll.ts`

* هنگام باز بودن Drawer/Modal `overflow: hidden` کند؛ روی بستن، revert.

---

## 6) پذیرش (Acceptance)

* دکمه «🛒» هدر → **Cart Drawer** از راست باز می‌شود؛ overlay دارد؛ Esc/بیرون‌بزن → بسته می‌شود؛ focus trap رعایت شود.
* آیتم‌ها: افزایش/کاهش تعداد، حذف؛ قیمت‌ها فارسی؛ جمع جزء/کل به‌روز.
* «ثبت سفارش»:

  * بدون لاگین → AuthModal باز می‌شود.
  * با لاگین → `POST /orders` موفق → سبد خالی و پیام موفقیت.
* **SearchBar** کنار لوگو (سمت راست) کار می‌کند:

  * با تایپ (≥۲ کاراکتر) → نتایج زنده با debounce و تصویر/قیمت.
  * Enter روی اینپوت → انتخاب اول (اگر پنل باز است)، ESC → بستن پنل.
  * `/` یا `Ctrl+K` → فوکوس روی جستجو.
* هیچ تغییری در `vite.config.ts` داده نشده.
* همهٔ درخواست‌ها به `/api/v1/...` و از `API_BASE` استفاده می‌کنند.

---

## 7) نکات Replit

* Run = `npm run dev` (طبق مدل یک‌پورت پایدار یا اگر قبلاً dev-proxy گذاشتی همان).
* اگر از مدل «تک‌پورت + `vite build --watch`» استفاده می‌کنی، همهٔ مسیرها از یک دامنه می‌آیند (بدون CORS).
* فونت Vazirmatn در `index.html` لود و روی `body` اعمال شود.

---

اگر لازم بود، بعد از ساخت، می‌تونم متن‌ها/اندازه‌ها/انیمیشن‌ها رو دقیق‌تر سلیقه‌ای کنم (مثلاً عرض Drawer، اندازه تصویر آیتم، یا رفتار Search در موبایل).
