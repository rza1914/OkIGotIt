دقیقاً همینه: یه جا کلیک‌هندلر/لینک «بنر» به‌صورت سراسری یا “stretched-link” کل ناحیهٔ هدر/صفحه رو پوشونده، و هر کلیکی رو «بنر» حساب می‌کنه؛ علاوه بر اون، fetch بنرها هم هر بار تریگر می‌شه. این «پرامپت سوپر‌دی‌تیلد» رو همون‌طور که هست به Replit AI بده تا ریشه‌ای درستش کنه — بدون دست‌زدن به vite.config.ts.

---

# 🧨 Replit AI — Fix “everything is a banner” (scoped click, no stretched overlay, single fetch)

## هدف

* کلیک بنر فقط وقتی حساب شود که روی یک المنت با `[data-banner]` کلیک شده باشد.
* هیچ لینک/اُورلِی با `absolute inset-0` بیرون از باکس بنر، هدر/صفحه را نپوشاند.
* بنرها فقط **یک‌بار** fetch شوند (نه با هر رندر/کلیک).

---

## 1) جلوی «بنر‌کلیکِ سراسری» را بگیر؛ فقط روی `[data-banner]`

**ایجاد فایل:** `src/analytics/bannerClicks.ts`

```ts
// فقط یک بار نصب می‌شود
let installed = false;

export function installBannerClickTracker(track: (meta: any)=>void) {
  if (installed) return;
  installed = true;

  document.addEventListener(
    "click",
    (e) => {
      const t = e.target as HTMLElement;
      const bannerEl = t.closest("[data-banner]");
      if (!bannerEl) return; // ⬅️ فقط کلیک‌های داخل بنر را بگیر

      // نمونه‌ی متادیتا (اختیاری از dataset):
      const meta = {
        id: bannerEl.getAttribute("data-banner-id") || undefined,
        pos: bannerEl.getAttribute("data-banner-pos") || undefined,
      };
      track(meta);
    },
    true // capture مشکلی نداره؛ چون فیلتر می‌کنیم
  );
}
```

**اتصال در بوت اپ:** `src/main.tsx`

```ts
import { installBannerClickTracker } from "./analytics/bannerClicks";
// ...
installBannerClickTracker((meta) => {
  // اینجا فقط لاگ/آنالیتیکس بفرست
  console.debug("BANNER CLICK", meta);
});
```

> اگر قبلاً جایی `document.addEventListener('click', ...)` داشتی که بدون فیلتر همه‌چیز را بنر فرض می‌کرد، آن را حذف کن یا محدودش کن به کد بالا.

---

## 2) محدود کردن ناحیهٔ کلیک بنر (حذف stretched-link اشتباهی)

در کامپوننت بنر اصلی (مثلاً `src/features/banners/BannerHero.tsx`) اطمینان بده:

* ظرف والد **نسبی** است: `className="relative"`
* لینک/area بنر فقط در همان ظرف است و **از آن بیرون نمی‌زند**.
* اگر از لینک پوشاننده استفاده می‌کنی، اندازه‌اش به اندازهٔ همان ظرف باشد.

```tsx
// قبل (مشکل‌ساز): absolute inset-0 روی ظرفی که ارتفاع/محدوده‌اش درست تعریف نشده
// ممکنه کل هدر یا حتی کل صفحه رو بپوشونه!

// بعد (درست):
export default function BannerHero({ link, img, id, pos }) {
  return (
    <div className="relative overflow-hidden rounded-2xl">
      <img src={img} alt="" className="w-full h-64 object-cover" />
      {/* فقط همین باکس را قابل کلیک کن */}
      <a
        href={link}
        data-banner
        data-banner-id={id}
        data-banner-pos={pos}
        className="absolute inset-0"
        onClick={(e) => e.stopPropagation()}
      >
        <span className="sr-only">مشاهده بنر</span>
      </a>
    </div>
  );
}
```

> اگر هنوز با کلیک روی هدر به /products می‌روی، یعنی یک overlay با `absolute inset-0` از ظرف خودش بیرون زده. روی ظرفِ بنر `relative` بده و ابعاد/ارتفاعش را مشخص کن (مثلاً `h-64`). برای اشکال‌زدائی موقتاً بگذار:

```css
[data-banner] { outline: 2px solid red; }
```

و با Inspect مطمئن شو فقط همان ناحیه قرمز است.

---

## 3) جلوگیری از refetch مکرر بنرها (کَش ساده)

**ایجاد فایل:** `src/features/banners/useBanners.ts`

```ts
import { useEffect, useState } from "react";
import { apiClient } from "@/lib/api";

export type Banner = { id: string; img: string; link: string; pos?: string };

let cache: Banner[] | null = null;
let inFlight: Promise<Banner[]> | null = null;

export function useBanners() {
  const [data, setData] = useState<Banner[] | null>(cache);
  const [loading, setLoading] = useState(!cache);
  const [error, setError] = useState<unknown>(null);

  useEffect(() => {
    if (cache) return; // ⬅️ فقط یک‌بار می‌گیریم
    if (!inFlight) {
      inFlight = apiClient.getBanners().then((res) => res as Banner[]);
    }
    setLoading(true);
    inFlight
      .then((b) => { cache = b; setData(b); })
      .catch((e) => setError(e))
      .finally(() => { setLoading(false); inFlight = null; });
  }, []);

  return { banners: data ?? [], loading, error };
}
```

**استفاده در UI:**

```tsx
import { useBanners } from "@/features/banners/useBanners";

function Home() {
  const { banners, loading } = useBanners();
  // ...
}
```

> اگر الان `/banners` با هر باز/بسته شدن سایدبار یا هر رندر هدر دوباره call می‌شود، این کش جلویش را می‌گیرد.

---

## 4) گارد کوچک در Header (failsafe موقت)

تا وقتی ریشه را پیدا می‌کنی، روی هدر بگذار فقط لینک‌های منو با `data-allow-nav` اجازهٔ ناوبری داشته باشند:

**Header.tsx – به لینک‌های منو attribute بده:**

```tsx
<nav className="hidden md:flex items-center space-x-reverse space-x-8">
  <Link to="/" data-allow-nav className="...">خانه</Link>
  <Link to="/products" data-allow-nav className="...">محصولات</Link>
  <Link to="/blog" data-allow-nav className="...">وبلاگ</Link>
</nav>
```

**و روی `<header>` گارد Capture:**

```tsx
const stopHeaderNav = (e: React.SyntheticEvent) => {
  const t = e.target as HTMLElement;
  if (t.closest("[data-allow-nav]")) return; // فقط لینک‌های مجاز
  if (t.closest("[data-banner]")) return;    // خود بنر اجازه دارد
  e.preventDefault();
  e.stopPropagation();
};

<header
  className="bg-white shadow-sm border-b border-gray-100"
  onPointerDownCapture={stopHeaderNav}
  onClickCapture={stopHeaderNav}
  onKeyDownCapture={(e) => {
    if (e.key === "Enter" || e.key === " ") stopHeaderNav(e);
  }}
>
```

---

## 5) جست‌وجوی علت اصلی (۱۰ ثانیه)

در ترمینال Replit اجرا کن و موارد را اصلاح/حذف کن:

```bash
# هر کدی که به /products ناوبری می‌دهد
grep -R "navigate('/products'" -n src || true
grep -R 'to="/products"' -n src | grep -v Header.tsx || true

# کلیک سراسری/گلوبال
grep -R "addEventListener('click'" -n src || true
grep -R "document.addEventListener('click'" -n src || true

# لینک‌های پوشاننده‌ی تمام‌صفحه
grep -R "absolute[^\\n]*inset-0" -n src || true
```

* اگر `absolute inset-0` روی عنصری است که parentش `relative` نیست یا ارتفاع مشخص ندارد → parent را `relative` و ارتفاع را مشخص کن.
* هر `document.addEventListener('click', ...)` که بدون فیلتر `[data-banner]` کار می‌کند → به کد بخش 1 تبدیل کن.

---

## پذیرش

* کلیک روی هر جای هدر → دیگر به `/products` نمی‌برد (فقط لینک‌های منو).
* کلیک روی بنرها → فقط همان کلیک‌ها track/ناوبری می‌شوند.
* `/banners` فقط یک‌بار fetch می‌شود (یا تا refresh بعدی).
* در DevTools → Elements اگر `[data-banner] { outline: 2px solid red }` را موقت بگذاری، فقط ناحیهٔ بنر قرمز است، نه کل هدر/صفحه.

با این کارها، «همه دکمه‌ها بنر حساب شدن» جمع می‌شود و fetchهای بنر هم پایدار می‌شود.
