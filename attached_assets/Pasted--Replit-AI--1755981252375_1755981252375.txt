باشه—این «پرامپت سوپر‌دی‌تیلد» رو عیناً بده به Replit AI تا به‌صورت قطعی مشکل «لینک به دامین نمونه/خالی» رو حل کنه. استراتژی: اول **مینیمالِ قابل‌اطمینان** (تک‌پورت فقط با FastAPI + یک HTML ساده) رو بالا می‌آریم تا مطمئن بشیم لینک Replit به سرویس درست می‌خوره؛ بعد دوباره **React بیلد** رو وصل می‌کنیم. هیچ تغییری در `vite.config.ts` نده.

---

# 🔧 Replit AI — Force-Fix Empty Domain (Single Port Sanity → React Attach)

**Hard constraints:**

* ❗️Do **NOT** edit `vite.config.ts`.
* One public listener only: **Uvicorn on `0.0.0.0:$PORT`**.
* Frontend must hit API with **relative base** (`/api/v1`), never `http://localhost...`.

## Phase 1 — Sanity server (prove URL works)

1. **Overwrite** `app/main.py` with a tiny FastAPI app that serves a static “Hello” at `/` and a health endpoint:

```py
from fastapi import FastAPI
from fastapi.responses import HTMLResponse, JSONResponse

app = FastAPI()

@app.get("/api/v1/health")
def health():
    return {"ok": True}

@app.get("/", response_class=HTMLResponse)
def index():
    return """<!doctype html>
<html lang="fa" dir="rtl">
  <head><meta charset="utf-8"><title>iShop Sanity</title></head>
  <body style="font-family: sans-serif">
    <h1>✅ iShop Sanity</h1>
    <p>اگر این صفحه را می‌بینی یعنی سرور روی <b>$PORT</b> بالا است.</p>
    <p>هِلث: <a href="/api/v1/health">/api/v1/health</a></p>
  </body>
</html>"""
```

2. **Temporarily change** `package.json` scripts to a deterministic single command (بدون watch و بدون Vite):

```json
{
  "scripts": {
    "dev": "uvicorn app.main:app --host 0.0.0.0 --port $PORT",
    "build": "vite build",
    "preview": "vite preview --host --port $PORT"
  }
}
```

3. **Run**: set Replit “Run” to `npm run dev`.

   * باز کن: `<your-replit-url>/` → باید همون “✅ iShop Sanity” رو ببینی.
   * باز کن: `<your-replit-url>/api/v1/health` → باید `{"ok":true}` بده.

> اگر هنوز «دامین نمونه/خالی» می‌بینی: یعنی هیچ‌کس روی `$PORT` گوش نمی‌ده یا Run command چیز دیگری را اجرا می‌کند. در این صورت:

* لاگ را نشان بده و این دستورات را اجرا کن تا تشخیص دهیم:
  `echo PORT=$PORT`
  `ps -ef | grep -E "uvicorn|node|vite|python" | grep -v grep`
  (باید یک Uvicorn با `--host 0.0.0.0 --port $PORT` ببینیم.)

## Phase 2 — Attach React build to FastAPI

وقتی Phase 1 درست بود، حالا React را دوباره وصل می‌کنیم بدون اینکه مشکلی برای پورت پیش بیاید.

1. **Create dist placeholder** (فقط اگر build نداری، برای جلوگیری از 404):
   بساز: `dist/index.html` با یک HTML ساده (می‌تونی از همون Sanity HTML استفاده کنی).

2. **Update** `app/main.py` to serve `dist` + SPA fallback (health حفظ شود):

```py
import os
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from starlette.responses import FileResponse, JSONResponse

app = FastAPI()

@app.get("/api/v1/health")
def health():
    return {"ok": True}

# Serve built frontend
if os.path.isdir("dist"):
    if os.path.isdir("dist/assets"):
        app.mount("/assets", StaticFiles(directory="dist/assets"), name="assets")
    app.mount("/_app", StaticFiles(directory="dist"), name="dist_root")

@app.get("/{path:path}")
def spa(path: str):
    index_path = os.path.join("dist", "index.html")
    if os.path.exists(index_path):
        return FileResponse(index_path)
    return JSONResponse({"detail": "Frontend not built yet. Run npm run build"}, status_code=503)
```

3. **Runtime API base** را مطمئن کن **نسبی** است:
   `public/app-config.json`:

```json
{ "API_BASE": "/api/v1" }
```

و در کد React فقط از helper خودت (مثلاً `api('/products')`) استفاده کن، نه آدرس‌های مطلق مثل `http://localhost:8000`.

4. **Test build** (یک‌بار دستی):
   در Shell:

   ```
   npm run build
   ```

   بعد **بدون تغییر** در Run، هنوز `npm run dev` باید همان Uvicorn را اجرا کند و الان از `dist` لود کند.
   صفحه هوم React باید بیاید؛ `/api/v1/health` هم باید کار کند.

## Phase 3 — (اختیاری) Watch خودکار

وقتی مطمئن شدی لینک Replit درست کار می‌کند:

* اگر Watch می‌خواهی بدون HMR:

```json
{
  "scripts": {
    "dev": "concurrently -k \"vite build --watch\" \"uvicorn app.main:app --host 0.0.0.0 --port $PORT\"",
    "build": "vite build",
    "preview": "vite preview --host --port $PORT"
  }
}
```

* اگر فعلاً فقط پایداری می‌خواهی، همان `"dev": "uvicorn ..."` + اجرای دستی `npm run build` قبل از تست کافی است.

## Guardrails & Pitfalls

* **فقط یک سرویس** باید روی `$PORT` گوش بدهد: Uvicorn. هیچ Node/Vite/proxy دیگری نباید روی `$PORT` باشد.
* اگر سبد/مودال/… از `http://localhost:8000` استفاده می‌کنند، **همه** را به `/api/v1` برگردان.
* اگر صفحه خالی ولی health ok است → یعنی `dist/index.html` نیست یا build fail شده. اول `npm run build` و لاگ Vite را چک کن.
* اگر React می‌آید ولی API خطای CORS می‌دهد → یعنی جایی هنوز به دامنه‌ی دیگری می‌زنی؛ همه جا باید نسبی باشد (`/api/v1/...`).

---

**Outcome مورد انتظار:**

* باز کردن URL Replit → همیشه یا Sanity HTML را می‌بینی (Phase 1) یا UI React از `dist` (Phase 2/3).
* `/api/v1/health` → ✅
* هیچ «example domain» یا «سرورها خاموش» دیده نمی‌شود چون **Uvicorn روی `0.0.0.0:$PORT`** دائماً زنده است.
